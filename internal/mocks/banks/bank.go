// Code generated by MockGen. DO NOT EDIT.
// Source: internal/banks/bank.go

// Package mock_banks is a generated GoMock package.
package mock_banks

import (
	context "context"
	dto "financing-aggregator/internal/dto"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBank is a mock of Bank interface.
type MockBank struct {
	ctrl     *gomock.Controller
	recorder *MockBankMockRecorder
}

// MockBankMockRecorder is the mock recorder for MockBank.
type MockBankMockRecorder struct {
	mock *MockBank
}

// NewMockBank creates a new mock instance.
func NewMockBank(ctrl *gomock.Controller) *MockBank {
	mock := &MockBank{ctrl: ctrl}
	mock.recorder = &MockBankMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBank) EXPECT() *MockBankMockRecorder {
	return m.recorder
}

// GetApplication mocks base method.
func (m *MockBank) GetApplication(ctx context.Context, id string) (dto.OfferDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplication", ctx, id)
	ret0, _ := ret[0].(dto.OfferDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplication indicates an expected call of GetApplication.
func (mr *MockBankMockRecorder) GetApplication(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplication", reflect.TypeOf((*MockBank)(nil).GetApplication), ctx, id)
}

// Name mocks base method.
func (m *MockBank) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockBankMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockBank)(nil).Name))
}

// SubmitApplication mocks base method.
func (m *MockBank) SubmitApplication(ctx context.Context, data dto.ApplicationDTO) (dto.OfferDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubmitApplication", ctx, data)
	ret0, _ := ret[0].(dto.OfferDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubmitApplication indicates an expected call of SubmitApplication.
func (mr *MockBankMockRecorder) SubmitApplication(ctx, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubmitApplication", reflect.TypeOf((*MockBank)(nil).SubmitApplication), ctx, data)
}
