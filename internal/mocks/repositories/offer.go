// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repositories/offer.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	models "financing-aggregator/internal/models"
	repositories "financing-aggregator/internal/repositories"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOfferRepository is a mock of OfferRepository interface.
type MockOfferRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOfferRepositoryMockRecorder
}

// MockOfferRepositoryMockRecorder is the mock recorder for MockOfferRepository.
type MockOfferRepositoryMockRecorder struct {
	mock *MockOfferRepository
}

// NewMockOfferRepository creates a new mock instance.
func NewMockOfferRepository(ctrl *gomock.Controller) *MockOfferRepository {
	mock := &MockOfferRepository{ctrl: ctrl}
	mock.recorder = &MockOfferRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferRepository) EXPECT() *MockOfferRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOfferRepository) Create(ctx context.Context, offer *models.Offer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, offer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockOfferRepositoryMockRecorder) Create(ctx, offer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOfferRepository)(nil).Create), ctx, offer)
}

// List mocks base method.
func (m *MockOfferRepository) List(ctx context.Context, filter repositories.OfferListFilter) ([]models.Offer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter)
	ret0, _ := ret[0].([]models.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOfferRepositoryMockRecorder) List(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOfferRepository)(nil).List), ctx, filter)
}

// Update mocks base method.
func (m *MockOfferRepository) Update(ctx context.Context, id string, offer models.Offer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id, offer)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockOfferRepositoryMockRecorder) Update(ctx, id, offer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOfferRepository)(nil).Update), ctx, id, offer)
}
